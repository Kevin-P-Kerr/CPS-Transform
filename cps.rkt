#lang racket
(define (cps-transform expr initcon)
  (let ((k (gensym 'K)))
  (cond ((atom? expr) `((lambda (,k)
                        (,k ,expr)) ,initcon))
        ((eq? (car expr) '+) (cps-plus expr initcon))
        ((eq? (car expr) '-) (cps-minus expr initcon))
        ((eq? (car expr) '*) (cps-multiply expr initcon))
        ((eq? (car expr) '/) (cps-divide expr initcon))
        ((eq? (car expr) '<) (cps-lt expr initcon))
        ((eq? (car expr) '>) (cps-gt expr initcon))
        ((eq? (car expr) '<=) (cps-lte expr initcon))
        ((eq? (car expr) '>=) (cps-gte expr initcon))                                     
        ((eq? (car expr) 'if) (cps-if expr initcon))        
        ((eq? (car expr) '<)  (cps-lt expr initcon))
        ((eq? (car expr) 'define) (cps-define expr initcon))
                                         
        (else (print "CPS ERROR!")))))

(define (atom? expr)
  (not (pair? expr)))

(define (cps-plus expr cc)
  (let ((k (gensym 'K)))
  `((lambda (,k)
    ((lambda (,mk)
      (,mk ,(cps-transform (car (cdr expr)) '(lambda (x) x))))
        (lambda (rval)
          ((lambda (PK)
            (PK ,(cps-transform (car (cdr (cdr expr))) '(lambda (x) x))))
                (lambda (lval)
                  (,k (+ rval lval))))))),cc)))

(define (cps-minus expr cc)
  (let ((k (gensym 'K)))
    `((lambda (,k)
        ((lambda (,mk)
           (,mk ,(cps-transform (car (cdr expr)) '(lambda (x) x))))
         (lambda (rval)
           ((lambda (MK)
              (MK ,(cps-transform (car (cdr (cdr expr))) '(lambda (x) x))))
            (lambda (rval)
              (,k (- rval lval))))))),cc)))

(define (cps-multiply expr cc)
  (let ((k (gensym 'K)))
    `((lambda (,k)
        ((lambda (,mk)
           (,mk ,(cps-transform (car (cdr expr)) '(lambda (x) x))))
         (lambda (rval)
           ((lambda (TK)
              (TK ,(cps-transform (car (cdr (cdr expr))) '(lambda (x) x))))
            (lambda (lval)
              (,k (* rval lval))))))),cc)))

(define (cps-divide expr cc)
  (let ((k (gensym 'K)))
    `((lambda (,k)
        ((lambda (,mk)
           (,mk ,(cps-transform (car (cdr expr)) '(lambda (x) x))))
         (lambda (rval)
           ((lambda (DK)
              (DK ,(cps-transform (car (cdr (cdr expr))) '(lambda (x) x))))
            (lambda (lval)
              (,k (/ rval lval))))))),cc)))

(define (cps-lt expr cc)
 `((lambda (,mk)
     (,mk ,(cps-transform (car (cdr expr)) '(lambda (x) x))))
     (lambda (lval)
       ((lambda (LK)
          (LK ,(cps-transform (car (cdr (cdr expr))) '(lambda(x) x))))
        (lambda (rval)
          (,cc (< lval rval)))))))

(define (cps-gt expr cc)
  `((lambda (,mk)
      (,mk ,(cps-transform (car (cdr expr)) '(lambda (x) x))))
    (lambda (lval)
      ((lambda (GT)
         (GT ,(cps-transform (car (cdr expr)) '(lambda (x) x))))
       (lambda (rval)
         (,cc (> lval rval)))))))

(define (cps-gte expr cc)
  `((lambda (,mk)
      (,mk ,(cps-transform (car (cdr expr)) '(lambda (x) x))))
    (lambda (lval)
      ((lambda (GTE)
         (GTE ,(cps-transform (car (cdr expr)) '(lambda (x) x))))
       (lambda (rval)
         (,cc (>= lval rval)))))))

(define (cps-lte expr cc)
  `((lambda (,mk)
      (,mk ,(cps-transform (car (cdr expr)) '(lambda (x) x))))
    (lambda (lval)
      ((lambda (LTE)
         (LTE ,(cps-transform (car (cdr expr)) '(lambda (x) x))))
       (lambda (rval)
         (,cc (<= lval rval)))))))

(define (cps-eq expr cc)
  `((lambda (,mk)
      (,mk ,(cps-transform (car (cdr expr)) '(lambda (x) x))))
    (lambda (lval)
      ((lambda (EQ)
         (EQ ,(cps-transform (car (cdr expr)) '(lambda (x) x))))
       (lambda (rval)
         (,cc (= lval rval)))))))
              
(define (cps-if expr cc)
 `((lambda (C)
  ((lambda (K)
    (K ,(cps-transform (car (cdr expr)) '(lambda (x) x))))
   (lambda (NK)
     (if NK (C ,(cps-transform (car (cdr (cdr expr))) '(lambda (x) x)))
            (C ,(cps-transform (car (cdr (cdr (cdr expr)))) '(lambda (x) x))))))),cc))

(define (make-new-param param)
  (if (null? param) '()
      (cons (car param)
            (make-new-param (cdr param)))))

(define (cps-define expr cc)
  (let  ((param (car (cdr expr)))
         (body (car (cdr (cdr expr)))))
    (let ((npram (make-new-param param)))
  `(define (,@npram cc) ,(cps-transform body 'cc)))))

(define y '(if (< 3 2) (+ 1 2) (+ 10 11)))

(define mk
  (gensym 'k))
